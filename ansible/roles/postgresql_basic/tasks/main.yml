---
# roles/postgresql_basic/tasks/main.yml

- name: Add PosgreSQL apt repo
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_lsb.codename}}-pgdg main' state=present
  register: add_postgresql_repo
  tags:
    - pgbouncer

- name: Add PosgreSQL apt key
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present
  tags:
    - pgbouncer

- name: Update package list
  apt: update_cache=yes
  when: add_postgresql_repo|changed
  tags:
    - pgbouncer

- name: generate en_US.UTF-8 locale
  locale_gen: name='en_US.UTF-8' state=present

- name: Install PostgreSQL & dependencies
  apt: name="{{ item }}" state=present
  with_items:
    - "postgresql-{{ postgresql_version }}"
    - "postgresql-{{ postgresql_version }}-plproxy"
    - "postgresql-contrib-{{ postgresql_version }}"
    - "postgresql-server-dev-{{ postgresql_version }}"
    - python-docutils  # required for building pghashlib
    - libpq-dev
    - python-psycopg2
    - unzip

- name: Check for original postgresql directory
  stat: path="{{ postgresql_dir_original_path }}/{{ postgresql_version }}/{{ postgresql_cluster_name }}/PG_VERSION"
  register: orig_path

- name: Make new postgresql directory
  become: yes
  file:
    path: '{{ postgresql_dir_path }}'
    owner: postgres
    group: postgres
    mode: 0755
    state: directory

- name: Check for new postgresql directory
  stat: path="{{ postgresql_dir_path }}/{{ postgresql_version }}/{{ postgresql_cluster_name }}/PG_VERSION"
  register: new_path

- name: Assert postgresql directory shows up in exactly one place
  fail: msg="postgresl directory must either be {{ postgresql_dir_path }} or {{ postgresql_dir_original_path }} (and not both)"
  when: ((orig_path.stat.exists and new_path.stat.exists) or (not orig_path.stat.exists and not new_path.stat.exists))

- name: Move postgres to encrypted drive
  command: "mv {{ postgresql_dir_original_path }}/{{ postgresql_version }} {{ postgresql_dir_path }}/"
  when: orig_path.stat.exists

- name: assert hot standby config correct
  assert: { that: "hot_standby_server is not defined or hot_standby_server in groups.pg_standby"}

- name: Create postgresql_log_directory
  file:
    dest: "{{ postgresql_log_directory }}"
    state: directory
    owner: postgres
    group: postgres

- name: PostgreSQL app configuration
  template: src=postgresql.conf.j2 dest="{{ postgresql_config_home }}/postgresql.conf" owner="postgres"
  tags: postgresql_conf
  notify: Restart postgres

- name: PostgreSQL access configuration
  template: src=pg_hba.conf.j2 dest="{{ postgresql_config_home }}/pg_hba.conf" owner="postgres"
  tags: postgresql_conf
  notify: Reload postgres

- name: start postgresql
  become: true
  service: name=postgresql state=started args="{{ postgresql_version }}"
  tags: after-reboot

- name: Create PostgreSQL users
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_user:
    name: "{{ item.username }}"
    password: "{{ item.password }}"
    role_attr_flags: "{{ item.role_attr_flags|default('CREATEDB') }}"
    state: present
    port: "{{ postgresql_port }}"
  when: not is_pg_standby|default(False)
  with_items: "{{ postgres_users.values() }}"
  tags:
    - postgres_users

- name: Add user privs
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_privs:
    db: postgres
    state: present
    privs: "{{ item.1.privs }}"
    objs: "{{ item.1.objs }}"
    roles: "{{ item.0.username }}"
    port: "{{ postgresql_port }}"
  when: not is_pg_standby|default(False)
  with_subelements:
    - "{{ postgres_users.values() }}"
    - privs
    - flags:
      skip_missing: True
  tags:
    - postgres_users

- name: check postgres database hosts
  assert: { that: "item.host is not defined or item.host in groups.postgresql or item.host in groups.pg_standby" }
  with_items: "{{ postgresql_dbs }}"

- name: Create PostgreSQL databases
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_db:
    name: "{{ item.name }}"
    state: present
    port: "{{ postgresql_port }}"
    owner: "{{ item.get('user', localsettings.PG_DATABASE_USER) }}"
    encoding: 'UTF-8'
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'
    template: 'template0'
  with_items: "{{ postgresql_dbs }}"
  when: item.create|default(True) and ((item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool)

- name: Copy log rotation script
  become: yes
  template:
    src: "rotate_logs.sh.j2"
    dest: "/usr/local/sbin/rotate_postgres_logs.sh"
    group: postgres
    owner: postgres
    mode: 0700
    backup: yes
  tags:
    - cron

- name: Create log rotation cron
  become: yes
  cron:
    name: "Rotate postgres logs"
    job: "/usr/local/sbin/rotate_postgres_logs.sh"
    minute: "*/15"
    user: postgres
    cron_file: rotate_postgres
  tags:
    - cron

- name: PostgreSQL monit config
  become: yes
  template:
    src: "monit.postgresql.j2"
    dest: "/etc/monit/conf.d/postgresql"
    group: root
    owner: root
    mode: 0640
  notify: reload monit
  tags: monit

- meta: flush_handlers
  
- monit:
    name: postgresql
    state: monitored
  tags: monit
  ignore_errors: "{{ ansible_check_mode }}"
