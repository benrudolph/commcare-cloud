---
# roles/postgresql/tasks/main.yml

- name: assert replication slot config correct
  assert: { that: "replication_slot is not defined or replication_slot in hostvars[hot_standby_master]['postgresql_replication_slots']"}

- name: Create wal archive directory
  become: true
  file:
    path: '{{ postgresql_archive_dir }}'
    owner: postgres
    group: postgres
    mode: 0755
    state: directory

# restart / reload if necessary to make sure replication slot config updated
- meta: flush_handlers

- name: Create replication slots
  pg_replication_slot:
    name: "{{ item }}"
    port: "{{ postgresql_port }}"
    state: present
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  with_items: "{{ postgresql_replication_slots|default([]) }}"
  when: not is_pg_standby|default(False)
  tags:
    - replication

- name: Install pgbouncer
  apt: name=pgbouncer state=present
  notify: Start pgbouncer
  tags:
    - pgbouncer

- name: pgbouncer configuration
  template: src=pgbouncer.ini.j2 dest="{{ pgbouncer_ini }}"
  notify: Reload pgbouncer
  tags:
    - pgbouncer
    - pgbouncer_conf

- name: pgbouncer users
  template: src=pgbouncer.users.j2 dest="{{ pgbouncer_users }}"
  notify: Reload pgbouncer
  tags:
    - pgbouncer

- name: pgbouncer defaults
  template: src=pgbouncer.defaults.j2 dest=/etc/default/pgbouncer
  tags:
    - pgbouncer

- name: Make sure nofile ulimit is high
  lineinfile:
    path: /etc/default/pgbouncer
    regexp: '^ULIMIT='
    line: 'ULIMIT="-n 65536"'
  notify: Restart pgbouncer
  tags:
    - pgbouncer

- name: pgbouncer init script
  template: src=pgbouncer.init.j2 dest=/etc/init.d/pgbouncer
  notify: Restart pgbouncer
  tags:
    - pgbouncer

# Allows to excecute task only when a tag is specified: https://serverfault.com/a/748864
- shell: /bin/true
  changed_when: false
  register: no_tags

- name: Restarts pgbouncer (affect max open files limit)
  command: /bin/true
  notify: Restart pgbouncer
  when: no_tags is not defined
  tags: after-reboot

- name: check if pghashlib installed
  stat:
    path: "{{postgres_install_dir}}/lib/hashlib.so"
  register: hashlib_stat
  tags: pghashlib

- name: Download pghashlib
  get_url: url=https://github.com/markokr/pghashlib/archive/master.zip dest=/tmp/pghashlib.zip
  when: hashlib_stat.stat.exists == False
  tags: pghashlib

- name: Unzip pghashlib
  command: unzip pghashlib.zip
  args:
     chdir: /tmp
     creates: /tmp/pghashlib-master
  when: hashlib_stat.stat.exists == False
  tags: pghashlib

- name: Install pghashlib
  become: yes
  shell: "PG_CONFIG={{postgres_install_dir}}/bin/pg_config make install"
  args:
    chdir: /tmp/pghashlib-master
    creates: "{{postgres_install_dir}}/lib/hashlib.so"
  notify:
    - Run ldconfig
    - Restart postgres
  when: hashlib_stat.stat.exists == False
  tags: pghashlib

- name: Create plproxy extension
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_ext:
    name: plproxy
    db: "{{item.name}}"
    port: "{{ postgresql_port }}"
  when: (item.get('django_alias') == 'proxy' and item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool
  with_items: "{{ postgresql_dbs }}"

- name: Create pghashlib extension
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_ext:
    name: hashlib
    db: "{{item.name}}"
    port: "{{ postgresql_port }}"
  with_items: "{{ postgresql_dbs }}"
  when: item.create|default(True) and not is_pg_standby|default(False) and ((item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool)
  tags: pghashlib

- name: Make plproxy a trusted language
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_lang:
    lang: plproxy
    trust: True
    db: "{{item.name}}"
    port: "{{ postgresql_port }}"
  when: (item.get('django_alias') == 'proxy' and item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool
  with_items: "{{ postgresql_dbs }}"

- name: Grant usage on plproxy FDW
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  shell: "{{postgres_install_dir}}/bin/psql -U postgres -p {{postgresql_port}} {{item.name}} -c \"GRANT USAGE on FOREIGN DATA WRAPPER plproxy to {{item.get('user', localsettings.PG_DATABASE_USER)}}\""
  when: (item.get('django_alias') == 'proxy' and item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool
  with_items: "{{ postgresql_dbs }}"

- name: Enable query stat collection
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  shell: "{{postgres_install_dir}}/bin/psql -U postgres -p {{postgresql_port}} {{item.name}} -c \"CREATE EXTENSION IF NOT EXISTS pg_stat_statements\""
  when: pg_query_stats|default(False) and item.query_stats|default(False) and not is_pg_standby|default(False) and (item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool
  with_items: "{{ postgresql_dbs }}"

- name: pgbouncer monit config
  become: yes
  template:
    src: "monit.pgbouncer.j2"
    dest: "/etc/monit/conf.d/pgbouncer"
    group: root
    owner: root
    mode: 0640
  notify: reload monit
  tags: monit

- meta: flush_handlers

- monit:
    name: postgresql
    state: monitored
  tags: monit
  ignore_errors: "{{ ansible_check_mode }}"
